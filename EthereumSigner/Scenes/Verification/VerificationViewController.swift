//
//  VerificationViewController.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerificationDisplayLogic: class {
    func displayInitialState(_ viewModel: Verification.InitialState.ViewModel)
    func displayValidationDidChange(_ viewModel: Verification.ValidationChange.ViewModel)
    func displayVerification()
}

class VerificationViewController: UIViewController {
    
    // MARK: - Properties
    
    var interactor: VerificationBusinessLogic?
    var router: VerificationRouterInput?
    
    private var validationConfiguration: ValidationConfiguration?
    
    // MARK: - Outlets
    
    @IBOutlet weak var verificationMessageTextField: UITextField!
    @IBOutlet weak var verifyButton: UIButton!
    
    // MARK: - Object Lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        VerificationConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.requestInitialState()
    }
    
    // MARK: - Actions
    
    @IBAction func onVerifyTapped(_ sender: UIButton) {
        guard let text = verificationMessageTextField.text else { return }
        interactor?.verifyMessage(Verification.Verify.Request(verificationMessage: text))
    }
}

// MARK: - Display Logic

extension VerificationViewController: VerificationDisplayLogic {
    func displayInitialState(_ viewModel: Verification.InitialState.ViewModel) {
        validationConfiguration = viewModel.validationConfiguration
        validationConfiguration?.setup(verificationMessageTextField)
        viewModel.buttonStyle.apply(to: verifyButton)
    }
    
    func displayValidationDidChange(_ viewModel: Verification.ValidationChange.ViewModel) {
        viewModel.buttonStyle.apply(to: verifyButton)
    }
    
    func displayVerification() {
        router?.showQrCodeScanner()
    }
}
