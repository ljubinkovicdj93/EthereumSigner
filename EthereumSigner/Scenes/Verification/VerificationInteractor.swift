//
//  VerificationInteractor.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerificationBusinessLogic {
    func requestInitialState()
    func verifyMessage(_ request: Verification.Verify.Request)
}

protocol VerificationDataStore {
    var verificationMessage: String? { get set }
}

class VerificationInteractor: VerificationBusinessLogic, VerificationDataStore {
    
    var verificationMessage: String?
    
    var presenter: VerificationPresentationLogic?
    lazy var worker: VerificationWorker? = {
        return VerificationWorker()
    }()
    
    // MARK: Business Logic
    
    func requestInitialState() {
        let privateKeyTextValidator = TextValidator.NonEmptyTextValidator
        
        let onTextDidChangeClosure: (String) -> Void = { [weak self] text in guard let self = self else { return }
            self.presenter?.presentValidationDidChange(Verification.ValidationChange.Response(validationState: privateKeyTextValidator.onValidate(text)))
        }
        
        presenter?.presentInitialState(Verification.InitialState.Response(onTextDidChangeClosure: onTextDidChangeClosure, textValidator: privateKeyTextValidator))
    }
    
    func verifyMessage(_ request: Verification.Verify.Request) {
        verificationMessage = request.verificationMessage
        presenter?.presentVerification()
    }
}
