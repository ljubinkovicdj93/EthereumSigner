//
//  SigningViewController.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SigningDisplayLogic: class {
    func displayInitialState(_ viewModel: Signing.InitialState.ViewModel)
    func displayValidationDidChange(_ viewModel: Signing.ValidationChange.ViewModel)
    func displaySignedMessage()
}

class SigningViewController: UIViewController {
    
    // MARK: - Properties
    
    var interactor: SigningBusinessLogic?
    var router: SigningRouterInput?
    
    private var validationConfiguration: ValidationConfiguration?
    
    // MARK: - Outlets
    
    @IBOutlet weak var signMessageTextField: UITextField!
    @IBOutlet weak var signMessageButton: UIButton!
    
    // MARK: - Object Lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        SigningConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.requestInitialState()
        
        // These should go inside presenter
        title = SigningStrings.navigationTitle.localized
        signMessageTextField.placeholder = SigningStrings.textFieldPlaceholder.localized
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        handleKeyboard()
        hideKeyboardWhenTappedAround()
    }
    
    // MARK: - Actions
    
    @IBAction func signMessageTapped(_ sender: UIButton) {
        guard let text = signMessageTextField.text else { return }
        interactor?.signMessage(Signing.Signature.Request(signedMessage: text))
    }
}

extension SigningViewController: SigningDisplayLogic {
    func displayInitialState(_ viewModel: Signing.InitialState.ViewModel) {
        validationConfiguration = viewModel.validationConfiguration
        validationConfiguration?.setup(signMessageTextField)
        viewModel.buttonStyle.apply(to: signMessageButton)
    }
        
    func displayValidationDidChange(_ viewModel: Signing.ValidationChange.ViewModel) {
        viewModel.buttonStyle.apply(to: signMessageButton)
    }
    
    func displaySignedMessage() {
        router?.showSignature()
    }
}
