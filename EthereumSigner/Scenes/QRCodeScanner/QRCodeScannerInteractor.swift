//
//  QRCodeScannerInteractor.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import AVFoundation
import UIKit

protocol QRCodeScannerBusinessLogic {
    func setupCaptureSession()
    func validateQrCode(_ request: QRCodeScanner.Validation.Request)
}

protocol QRCodeScannerDataStore {
    var verificationMessage: String? { get set }
}

class QRCodeScannerInteractor: QRCodeScannerBusinessLogic, QRCodeScannerDataStore {
    
    var verificationMessage: String?
    
    var presenter: QRCodeScannerPresentationLogic?
    lazy var worker: QRCodeScannerWorker? = {
        return QRCodeScannerWorker()
    }()
    
    // MARK: Business Logic
    
    func setupCaptureSession() {
        guard let input = worker?.getInputDevice() else { fatalError("Couldn't get camera input device.") }
        
        let captureSession = AVCaptureSession()
        captureSession.addInput(input)
        
        presenter?.presentSetupCaptureSession(QRCodeScanner.CaptureSession.Response(captureSession: captureSession))
    }
    
    func validateQrCode(_ request: QRCodeScanner.Validation.Request) {
        guard let verificationMessage = verificationMessage else { return }
        Web3Manager.shared.validateQr(request.qrCodeStringValue, verificationMessage: verificationMessage ) { [weak self] result in guard let self = self else { return }
            self.presenter?.presentQrCodeValidation(QRCodeScanner.Validation.Response(result: result))
        }
    }
}
