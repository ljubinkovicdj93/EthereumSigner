//
//  QRCodeScannerViewController.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import AVFoundation
import UIKit

protocol QRCodeScannerDisplayLogic: class {
    func displayCaptureSession(_ viewModel: QRCodeScanner.CaptureSession.ViewModel)
    func displayQrCodeValidation(_ viewModel: QRCodeScanner.Validation.ViewModel)
}

class QRCodeScannerViewController: UIViewController {
    
    // MARK: - Properties
    var interactor: QRCodeScannerBusinessLogic?
    var router: QRCodeScannerRouterInput?
    
    private var videoPreviewLayer: AVCaptureVideoPreviewLayer?
    private var captureSession: AVCaptureSession?
    
    private let supportedCodeTypes = [AVMetadataObject.ObjectType.upce,
                                      AVMetadataObject.ObjectType.code39,
                                      AVMetadataObject.ObjectType.code39Mod43,
                                      AVMetadataObject.ObjectType.code93,
                                      AVMetadataObject.ObjectType.code128,
                                      AVMetadataObject.ObjectType.ean8,
                                      AVMetadataObject.ObjectType.ean13,
                                      AVMetadataObject.ObjectType.aztec,
                                      AVMetadataObject.ObjectType.pdf417,
                                      AVMetadataObject.ObjectType.itf14,
                                      AVMetadataObject.ObjectType.dataMatrix,
                                      AVMetadataObject.ObjectType.interleaved2of5,
                                      AVMetadataObject.ObjectType.qr]
    
    // MARK: - Outlets
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    // MARK: - Object Lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        QRCodeScannerConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.setupCaptureSession()
    }
}

extension QRCodeScannerViewController: QRCodeScannerDisplayLogic {
    func displayCaptureSession(_ viewModel: QRCodeScanner.CaptureSession.ViewModel) {
        captureSession = viewModel.captureSession
        let captureMetadataOutput = AVCaptureMetadataOutput()
        captureSession?.addOutput(captureMetadataOutput)
        captureMetadataOutput.setMetadataObjectsDelegate(self, queue: .main)
        captureMetadataOutput.metadataObjectTypes = supportedCodeTypes
        
        setupVideoPreviewLayer()
    }
    
    func displayQrCodeValidation(_ viewModel: QRCodeScanner.Validation.ViewModel) {
        let alertController = UIAlertController(title: viewModel.title, message: nil, preferredStyle: .alert)
        let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alertController.addAction(alertAction)
        
        present(alertController, animated: true, completion: nil)
    }
    
    // MARK: - Helpers
    
    private func setupVideoPreviewLayer() {
        guard let captureSession = captureSession else { return }
        videoPreviewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        videoPreviewLayer?.videoGravity = AVLayerVideoGravity.resizeAspectFill
        videoPreviewLayer?.frame = view.layer.bounds
        view.layer.addSublayer(videoPreviewLayer!)
        
        captureSession.startRunning()
    }
}

// MARK: - AVCaptureMetadataOutputObjectsDelegate

extension QRCodeScannerViewController: AVCaptureMetadataOutputObjectsDelegate {
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
        if metadataObjects.count == 0 { return }
        
        let metadataObj = metadataObjects[0] as! AVMetadataMachineReadableCodeObject
        
        if supportedCodeTypes.contains(metadataObj.type),
            let stringValue = metadataObj.stringValue {
            
            interactor?.validateQrCode(QRCodeScanner.Validation.Request(qrCodeStringValue: stringValue))
        }
    }
}
