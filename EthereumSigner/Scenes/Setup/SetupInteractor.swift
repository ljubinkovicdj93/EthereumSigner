//
//  SetupInteractor.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import web3swift
import BigInt

protocol SetupBusinessLogic {
    func requestInitialState()
    func createAccount(_ request: Setup.Account.Request) throws
}

protocol SetupDataStore {
    var wallet: Wallet? { get set }
}

class SetupInteractor: SetupBusinessLogic, SetupDataStore {
    
    var wallet: Wallet?
    
    var presenter: SetupPresentationLogic?
    lazy var worker: SetupWorker? = {
        return SetupWorker()
    }()
    //var name: String = ""
    
    // MARK: Business Logic
    
    func requestInitialState() {
        let onTextDidChangeClosure: (String) -> Void = { text in
            print(text)
        }
        presenter?.presentInitialState(Setup.InitialState.Response(onTextDidChangeClosure: onTextDidChangeClosure))
    }
    
    func createAccount(_ request: Setup.Account.Request) throws {
        #warning("TODO: USE THIS INSTEAD!")
//        let privateKey = request.privateKeyText
        let privateKey = "A6E4AF5B2B8323E965876D94D9CE635723A8A7193E61000D241CDDEAA613F3E4" // Some private key
        Web3Manager.shared.storePrivateKey(privateKey)
        
        do {
            let wallet = try Web3Manager.shared.getAccountAndBalance()
            self.wallet = wallet
            presenter?.presentAccountAndBalance(Setup.Account.Response(wallet: wallet))
        } catch {
            throw EthereumError.genericError(error.localizedDescription)
        }
    }
}
