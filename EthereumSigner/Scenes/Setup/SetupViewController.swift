//
//  SetupViewController.swift
//  EthereumSigner
//
//  Created by Djordje Ljubinkovic on 08/02/2020.
//  Copyright (c) 2020 Djordje Ljubinkovic. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SetupDisplayLogic: class {
    func displayInitialState(_ viewModel: Setup.InitialState.ViewModel)
    func displayValidationDidChange(_ viewModel: Setup.ValidationChange.ViewModel)
    func displayAccountAndBalance(_ viewModel: Setup.Account.ViewModel)
}

class SetupViewController: UIViewController {
    
    // MARK: - Properties
    var interactor: SetupBusinessLogic?
    var router: SetupRouterInput?
    private var validationConfiguration: ValidationConfiguration?
    
    // MARK: - Outlets
    
    @IBOutlet weak var privateKeyTextField: UITextField!
    @IBOutlet weak var errorMessageLabel: UILabel!
    @IBOutlet weak var nextButton: UIButton!
    
    // MARK: - Object Lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        SetupConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Uncomment to always show setup screen first.
//        KeychainManager.deleteKeys()
        
        performInitialCheck()
        
        #warning("TODO: REMOVE!!!")
        privateKeyTextField.text = "A6E4AF5B2B8323E965876D94D9CE635723A8A7193E61000D241CDDEAA613F3E4"
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        handleKeyboard()
        hideKeyboardWhenTappedAround()
    }
    
    private func performInitialCheck() {
        if case let .privateKeyExists(privateKeyData) = RoutingService.shared.resolveInitialState() {
            let privateKey = String(decoding: privateKeyData, as: UTF8.self)
            guard !privateKey.isEmpty else {
                assertionFailure("Couldn't decode private key data from Keychain.")
                interactor?.requestInitialState()
                return
            }
            createAccount(privateKey)
        } else {
            interactor?.requestInitialState()
        }
    }
    
    // MARK: - Actions
    
    @IBAction func onNextButtonTapped(_ sender: UIButton) {
        guard let validationConfiguration = self.validationConfiguration else { return }
        createAccount(validationConfiguration.currentText)
    }
    
    private func createAccount(_ privateKey: String) {
        do {
            try interactor?.createAccount(Setup.Account.Request(privateKeyText: privateKey))
        } catch {
            print("Something went wrong: \(error.localizedDescription)")
        }
    }
}

// MARK: - Display Logic

extension SetupViewController: SetupDisplayLogic {
    func displayInitialState(_ viewModel: Setup.InitialState.ViewModel) {
        validationConfiguration = viewModel.validationConfiguration
        validationConfiguration?.setup(privateKeyTextField)
        
        viewModel.buttonStyle.apply(to: nextButton)
        viewModel.errorLabelStyle.apply(to: errorMessageLabel)
        
        #warning("TODO: REMOVE!!!")
        nextButton.backgroundColor = .systemBlue
        nextButton.isEnabled = true
    }
    
    func displayValidationDidChange(_ viewModel: Setup.ValidationChange.ViewModel) {
        viewModel.buttonStyle.apply(to: nextButton)
        viewModel.errorLabelStyle.apply(to: errorMessageLabel)
        validationConfiguration?.updateMaximumCharactersLimit(viewModel.maximumCharactersAllowed)
        
        if viewModel.validationState == .valid { privateKeyTextField.resignFirstResponder() }
    }
    
    func displayAccountAndBalance(_ viewModel: Setup.Account.ViewModel) {
        router?.showAccountAndBalance()
    }
}

